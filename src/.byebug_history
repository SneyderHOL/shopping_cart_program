continue
exit
Model::Product.all
 l
continue
order
continue
total
total_products
number_of_products
continue
total
total_products
number_of_products
resource
continue
resource
total
continue
order
number_of_products
total
total += 1
total
Model::Cart.products
order.total
order
continue
resource.quantity
resource.price
resource.description
resource.name
continue
product_attributes
resource.quantity
resource.price
resource.description
resource.name
continue
product_attributes
resource.name
continue
resource.price
resource.description
resource.name
resource.quantity
quantity.class
quantity
continue
quantity.class
quantity
continue
resource.quantity
resource
quantity.class
quantity
continue
product_attributes[:quantity].class
product_attributes[:price].class
product_attributes[:description].class
product_attributes[:name].class
product_attributes[:name]
product_attributes
continue
quantity > resource.quantity
continue
quantity > resource.quantity
resource.quantity
quantity
continue
key
continue
Model::Product.name
Model::Product.class.name
Model::Product.class
Model::Product.name
Model::Product.methods
Model::Product.name
Model::Product.class.to_s
continue
self
exit
eit
continue
self
send('name=', 'b')
send(:name=, b)
self.methods
send('name=', b)
send('name')
send(att.to_sym, value)
send(att.to_sym, *value)
send(att.to_sym)
value
att
continue
product_attributes
continue
result
continue
result
continue
resources.map(&:values)
resources.values
resources
continue
resources
resource
continue
result
continue
result
continue
products
continue
exit
all = Model::Engine::DataStorage.all(nil)
all = Model::Engine::DataStorage.all
products
continue
products
exit
mod.to_s
mod = Model::Product.new(product_attributes)
exit
mod.to_s
mod
mod = Model::Product.new(product_attributes)
mod
mod.to_s
mod = Model::Product.create(product_attributes)
continue
object.to_hash
exit
object.hash
object.methods
object.to_hash
object.to_h
